from sklearn import svm
from sklearn import metrics
from sklearn import model_selection
from sklearn import preprocessing
from sklearn.feature_selection import SelectKBest, f_classif


# Initialize SVM classifier
svc = svm.SVC()

# Define the parameter grid: Explore more parameters as needed
parameters = {
    'C': [0.1,0.5, 1, 10,100],
    'kernel': ['linear', 'rbf'],
    'gamma': ['scale', 1, 0.01, 0.001, 0.0001]
}

features = df.drop('label', axis=1)
labels = df['label']

# Split the dataset
train_features, test_features, train_labels, test_labels = model_selection.train_test_split(features, labels, test_size=0.3, random_state=0)

# Scale features
scaler = preprocessing.MinMaxScaler()
train_features_scaled = scaler.fit_transform(train_features)
test_features_scaled = scaler.transform(test_features)

# Perform grid search to find the best model
clf = model_selection.GridSearchCV(svc, parameters, cv=5)
clf.fit(train_features_scaled, train_labels)

# Output the best model found by Grid Search
print("The best classifier is:", clf.best_estimator_)
print("Its accuracy (on training set) is:", clf.best_score_)
print("Its parameters are:", clf.best_params_)

# Predict the labels on the test set with the best model
test_predictions = clf.best_estimator_.predict(test_features_scaled)

# Calculate and print the accuracy on the test set
test_accuracy = metrics.accuracy_score(test_labels, test_predictions)
print("Accuracy on the test set:", test_accuracy)
